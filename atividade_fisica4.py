# -*- coding: utf-8 -*-
"""Atividade_Fisica4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bEa0dhrlKUQ-W1axPD6kGmABT_UGh2x7
"""

!pip install ipywidgets
!pip install matplotlib

import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from ipywidgets import interact, VBox, HBox

# Função para plotar o gráfico de difração, interferência e difração + interferência
def plot_diffraction_interference(a_mm, d_mm, lambda_nm, x_min, x_max):
    # Convertendo os parâmetros de entrada para metros
    a = a_mm * 1e-3  # largura da fenda (mm -> m)
    d = d_mm * 1e-3  # distância entre fendas (mm -> m)
    lambda_ = lambda_nm * 1e-9  # comprimento de onda (nm -> m)

    # Definindo ângulos de x_min a x_max graus
    theta_degrees = np.linspace(x_min, x_max, 1000)
    theta_radians = np.radians(theta_degrees)

    # Calculando β para difração por uma fenda
    beta = (np.pi * a * np.sin(theta_radians)) / lambda_

    # Calculando a intensidade para difração
    I_fenda = (np.sin(beta) / beta) ** 2  # Difração por cada fenda
    I_fenda[beta == 0] = 1  # Evitando divisão por zero

    # Calculando a intensidade para interferência
    I_interferencia = np.cos(np.pi * d * np.sin(theta_radians) / lambda_) ** 2

    # Intensidade total (difração + interferência)
    I_total = I_fenda * I_interferencia

    # Plotando o gráfico
    plt.figure(figsize=(8, 5))

    # Difração
    plt.plot(theta_degrees, I_fenda, label='Difração (fenda única)', linestyle='--', color='orange')

    # Interferência
    plt.plot(theta_degrees, I_interferencia, label='Interferência (duas fendas)', linestyle=':', color='green')

    # Difração + Interferência
    plt.plot(theta_degrees, I_total, label='Difração + Interferência', color='blue')

    plt.title(f"Difração e Interferência (a = {a_mm} mm, d = {d_mm} mm, λ = {lambda_nm} nm)")
    plt.xlabel("Ângulo θ (graus)")
    plt.ylabel("Intensidade Normalizada I(θ)")
    plt.xlim([x_min, x_max])  # Limites para o zoom no eixo X
    plt.grid(True)
    plt.legend()
    plt.show()

# Sliders para os parâmetros da difração e interferência
a_slider = widgets.FloatSlider(value=0.01, min=0.001, max=0.05, step=0.001, description='Largura a (mm)')
d_slider = widgets.FloatSlider(value=0.01, min=0.001, max=0.05, step=0.001, description='Distância d (mm)')
lambda_slider = widgets.FloatSlider(value=400, min=300, max=700, step=10, description='Comprimento λ (nm)')

# Sliders para controle de zoom no eixo X
x_min_slider = widgets.FloatSlider(value=-10, min=-20, max=0, step=1, description='X Mínimo')
x_max_slider = widgets.FloatSlider(value=10, min=0, max=20, step=1, description='X Máximo')

# Interface interativa com os seletores de parâmetros em cima e controle de zoom embaixo
ui = VBox([
    HBox([a_slider, d_slider, lambda_slider]),  # Colocando os parâmetros acima
    HBox([x_min_slider, x_max_slider])  # Colocando o zoom abaixo
])

out = widgets.interactive_output(plot_diffraction_interference, {
    'a_mm': a_slider,
    'd_mm': d_slider,
    'lambda_nm': lambda_slider,
    'x_min': x_min_slider,
    'x_max': x_max_slider
})

display(ui, out)



# Segundo Metodo
import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from ipywidgets import interact, VBox, HBox

# Função para plotar o gráfico de difração, interferência e difração + interferência
def plot_diffraction_interference(a_mm, d_mm, lambda_nm, x_min, x_max):
    # Convertendo os parâmetros de entrada para metros
    a = a_mm * 1e-3  # largura da fenda (mm -> m)
    d = d_mm * 1e-3  # distância entre fendas (mm -> m)
    lambda_ = lambda_nm * 1e-9  # comprimento de onda (nm -> m)

    # Definindo ângulos de x_min a x_max graus
    theta_degrees = np.linspace(x_min, x_max, 1000)
    theta_radians = np.radians(theta_degrees)

    # Calculando β para difração por uma fenda
    beta = (np.pi * a * np.sin(theta_radians)) / lambda_

    # Calculando a intensidade para difração
    I_fenda = (np.sin(beta) / beta) ** 2  # Difração por cada fenda
    I_fenda[beta == 0] = 1  # Evitando divisão por zero

    # Calculando a intensidade para interferência
    I_interferencia = np.cos(np.pi * d * np.sin(theta_radians) / lambda_) ** 2

    # Intensidade total (difração + interferência)
    I_total = I_fenda * I_interferencia

    # Plotando o gráfico
    plt.figure(figsize=(10, 6))

    # Difração
    plt.plot(theta_degrees, I_fenda, label='Difração (fenda única)', linestyle='--', color='orange')

    # Interferência
    plt.plot(theta_degrees, I_interferencia, label='Interferência (duas fendas)', linestyle=':', color='green')

    # Difração + Interferência
    plt.plot(theta_degrees, I_total, label='Difração + Interferência', color='blue')

    plt.title(f"Difração e Interferência (a = {a_mm} mm, d = {d_mm} mm, λ = {lambda_nm} nm)")
    plt.xlabel("Ângulo θ (graus)")
    plt.ylabel("Intensidade Normalizada I(θ)")
    plt.xlim([x_min, x_max])  # Limites para o zoom no eixo X
    plt.grid(True)
    plt.legend()
    plt.show()

# Sliders para os parâmetros da difração e interferência
a_slider = widgets.FloatSlider(value=0.01, min=0.001, max=0.05, step=0.001, description='Largura a (mm)')
d_slider = widgets.FloatSlider(value=0.01, min=0.001, max=0.05, step=0.001, description='Distância d (mm)')
lambda_slider = widgets.FloatSlider(value=400, min=300, max=700, step=10, description='Comprimento λ (nm)')

# Sliders para controle de zoom no eixo X
x_min_slider = widgets.FloatSlider(value=-10, min=-20, max=0, step=1, description='X Mínimo')
x_max_slider = widgets.FloatSlider(value=10, min=0, max=20, step=1, description='X Máximo')

# Interface interativa com os seletores de parâmetros em cima e controle de zoom embaixo
ui = VBox([
    HBox([a_slider, d_slider, lambda_slider]),  # Colocando os parâmetros acima
    HBox([x_min_slider, x_max_slider])  # Colocando o zoom abaixo
])

out = widgets.interactive_output(plot_diffraction_interference, {
    'a_mm': a_slider,
    'd_mm': d_slider,
    'lambda_nm': lambda_slider,
    'x_min': x_min_slider,
    'x_max': x_max_slider
})

# Exibindo a interface e escondendo o código
display(ui, out)
